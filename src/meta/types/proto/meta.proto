syntax = "proto3";

package meta;

import "request.proto";

message Empty {}

message RaftRequest {
  string data = 1;
}

message RaftReply {
  string data = 1;
  string error = 2;
}

// messages for txn
message TxnCondition {
  // condition result
  enum ConditionResult {
    EQ = 0;
    GT = 1;
    GE = 2;
    LT = 3;
    LE = 4;
    NE = 5;
  }

  string key = 1;

  oneof target {
    // used when compare value
    bytes value = 2;
    // used when compare seq
    uint64 seq = 3;
  }

  // the expected result of condition, if `expected` match the condition result,
  // then the `if_then` op will be executed, otherwise `else_then` op will be
  // executed.
  ConditionResult expected = 4;
}

message TxnOp {
  oneof request {
    TxnGetRequest get = 1;
    TxnPutRequest put = 2;
    TxnDeleteRequest delete = 3;
    TxnDeleteByPrefixRequest delete_by_prefix = 4;
  }
}

message TxnOpResponse {
  oneof response {
    TxnGetResponse get = 1;
    TxnPutResponse put = 2;
    TxnDeleteResponse delete = 3;
    TxnDeleteByPrefixResponse delete_by_prefix = 4;
  }
}

message TxnRequest {
  // `condition` is a list of predicates.
  // If all of them success, the `if_then` will be executed,
  // otherwise `else_then` op will be executed.
  repeated TxnCondition condition = 1;

  // `if_then` is a list of operations will be executed when all condition
  // evaluates to true.
  repeated TxnOp if_then = 2;

  // `else_then` is a list of operations will be executed when not all condition
  // evaluates to true.
  repeated TxnOp else_then = 3;
}

message TxnReply {
  bool success = 1;
  repeated TxnOpResponse responses = 2;
  string error = 3;
}

// Item for a Streaming read reply, e.g., for `Mget` and `List`.
message StreamItem {
  string key = 1;
  optional SeqV value = 2;
}

service MetaService {

  rpc Transaction(TxnRequest) returns (TxnReply);

}
